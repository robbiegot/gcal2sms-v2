generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id            String     @id @default(cuid())
  email         String     @unique
  name          String?
  userToken     String?
  defRmndrStr   String?    @default("you have an upcoming appointment")
  defRmndrTime  Int        @default(36)
  phoneNumber   Int?
  lastLogin     DateTime   @default(now())
  createdAt     DateTime   @default(now()) @map(name: "created_at")
  updatedAt     DateTime   @updatedAt @map(name: "updated_at")
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  calendar      Calendar[]
  contacts      Contact[]

  @@map("users")
}

model Calendar {
  id                        String    @id @default(cuid())
  googleId                  String    @unique
  calOwner                  User      @relation(fields: [calOwnerId], references: [id])
  calOwnerId                String
  summary                   String
  timeZone                  String?
  location                  String?
  events                    Event[]
  createdAt                 DateTime  @default(now()) @map(name: "created_at")
  updatedAt                 DateTime  @updatedAt @map(name: "updated_at")
  X_Goog_Channel_Id         String?   @unique
  X_Goog_Resource_Id        String?   @unique
  X_Goog_Resource_Uri       String?
  X_Goog_Channel_Expiration DateTime?
  X_Goog_Resource_State     String?
}

model Event {
  id             String             @id @default(cuid())
  googleId       String             @unique
  calendar       Calendar           @relation(fields: [calendarId], references: [id])
  calendarId     String
  status         String?
  htmlLink       String?
  created        DateTime
  updated        DateTime
  summary        String
  description    String?
  location       String?
  organizerEmail String?
  start          DateTime
  end            DateTime
  reminders      Reminder[]
  attendees      ContactsOnEvents[]

  @@map("events")
}

model Reminder {
  id          String                @id @default(cuid())
  timeToSend  DateTime
  rmdrType    String?
  rmdrText    String
  event       Event                 @relation(fields: [eventId], references: [id])
  eventId     String
  attendees   ContactsOnReminders[]
  readyToSend Boolean
  sent        Boolean               @default(false)
  canceled    Boolean               @default(false)
}

model Contact {
  id                 String                @id @default(cuid())
  email              String?               @unique
  userOwner          User                  @relation(fields: [userOwnerId], references: [id])
  userOwnerId        String
  name               String
  reminder           ContactsOnReminders[]
  phoneNumber        Int                   @unique
  sendReminders      Boolean               @default(true)
  customReminderText String?
  cutomReminderTime  Int?
  events             ContactsOnEvents[]
}

model ContactsOnReminders {
  reminder   Reminder @relation(fields: [reminderId], references: [id])
  reminderId String
  contact    Contact  @relation(fields: [contactId], references: [id])
  contactId  String

  @@id([reminderId, contactId])
}

model ContactsOnEvents {
  event     Event   @relation(fields: [eventId], references: [id])
  eventId   String
  contact   Contact @relation(fields: [contactId], references: [id])
  contactId String

  @@id([eventId, contactId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
