generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id               String                 @id @default(cuid())
  email            String                 @unique
  name             String?
  userToken        String?
  phoneNumber      Int?
  lastLogin        DateTime               @default(now())
  createdAt        DateTime               @default(now()) @map("created_at")
  updatedAt        DateTime               @updatedAt @map("updated_at")
  emailVerified    DateTime?
  image            String?
  calendar         Calendar[]
  contacts         Contact[]
  accounts         Account[]
  sessions         Session[]
  defaultReminders DefaultRemindersUser[]

  @@map("users")
}

model Calendar {
  id                        String    @id @default(cuid())
  googleId                  String    @unique
  calOwnerId                String
  summary                   String
  timeZone                  String?
  location                  String?
  createdAt                 DateTime  @default(now()) @map("created_at")
  updatedAt                 DateTime  @updatedAt @map("updated_at")
  X_Goog_Channel_Id         String?   @unique
  X_Goog_Resource_Id        String?   @unique
  X_Goog_Resource_Uri       String?
  X_Goog_Channel_Expiration DateTime?
  X_Goog_Resource_State     String?
  syncToken                 String?
  calOwner                  User      @relation(fields: [calOwnerId], references: [id], onDelete: Cascade)
  events                    Event[]
}

model Event {
  id             String     @id @default(cuid())
  googleId       String     @unique
  calendarId     String
  status         String?
  htmlLink       String?
  created        DateTime
  updated        DateTime
  summary        String
  description    String?
  location       String?
  organizerEmail String?
  start          DateTime
  end            DateTime
  reminders      Reminder[]
  calendar       Calendar   @relation(fields: [calendarId], references: [id], onDelete: Cascade)
  attendees      Contact[]

  @@map("events")
}

model Reminder {
  id           String   @id @default(cuid())
  timeToSend   Int
  rmdrType     String?
  rmdrText     String
  eventId      String
  readyToSend  Boolean
  sentToServer DateTime
  sentToTwilio DateTime
  completed    DateTime
  canceled     Boolean  @default(false)
  contactId    String
  attendee     Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)
  event        Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model Contact {
  id               String                    @id @default(cuid())
  email            String
  userOwnerId      String
  name             String?
  phoneNumber      Int?
  sendReminders    Boolean                   @default(true)
  defaultReminders DefaultRemindersContact[]
  userOwner        User                      @relation(fields: [userOwnerId], references: [id], onDelete: Cascade)
  reminder         Reminder[]
  events           Event[]

  @@unique([userOwnerId, email])
  @@unique([userOwnerId, phoneNumber])
}

model DefaultRemindersUser {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  time   Int
  text   String
}

model DefaultRemindersContact {
  id        String  @id @default(cuid())
  contactId String
  user      Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)
  userId    String
  time      Int
  text      String
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
