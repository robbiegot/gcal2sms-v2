generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  passwordHash  String  
  firstName     String? 
  lastName      String? 
  userToken     String?
  defRmndrStr   String?   @default("you have an upcoming appointment")
  defRmndrTime  DateTime
  phoneNumber   Int?
  lastLogin     DateTime 
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  calendar      Calendar[]
  contacts      Contact[]
}

model Calendar {
  id          String    @id @default(cuid())
  googleID    String    @unique
  calOwner    User      @relation(fields: [calOwnerID], references: [id])
  calOwnerID  String
  Summary     String
  timeZone    String?
  location    String?
  events      Event[]
  createdAt   DateTime  @default(now()) @map(name: "created_at")
  updatedAt   DateTime  @updatedAt @map(name: "updated_at")
}

model Event {
  id              String    @id @default(cuid())
  googleID        String  
  calendar        Calendar  @relation(fields: [calendarID], references: [id])
  calendarID      String
  status          String?
  htmlLink        String?
  created         DateTime
  updated         DateTime
  summary         String
  description     String?
  location        String?
  organizerEmail  String?
  start           DateTime
  end             DateTime
  reminders       Reminder[]
  attendees       ContactsOnEvents[]
}

model Reminder {
  id          String   @id @default(cuid())
  timeToSend  DateTime 
  rmdrType    String? 
  rmdrText    String
  event       Event    @relation(fields: [eventID], references: [id])
  eventID     String       
  attendees   ContactsOnReminders[]
  ReadyToSend Boolean
  sent        Boolean  @default(false)
  canceled    Boolean  @default(false)
}

model Contact {
  id            String    @id @default(cuid())
  firstName     String?
  lastName      String?
  email         String    @unique
  userOwner     User      @relation(fields: [userOwnerID], references: [id])
  userOwnerID   String       
  Reminder      ContactsOnReminders[]
  phoneNumber   Int       @unique
  sendReminders Boolean   @default(true)
  defRmndrStr   String?   @default("you have an upcoming appointment")
  defRmndrTime  DateTime
  events        ContactsOnEvents[]

}

model ContactsOnReminders {
  reminder       Reminder @relation(fields: [reminderID], references: [id])
  reminderID     String
  contact        Contact  @relation(fields: [contactID], references: [id])
  contactID      String 

  
  @@id([reminderID, contactID])
}

model ContactsOnEvents {
  event       Event  @relation(fields: [eventID], references: [id])
  eventID     String
  contact     Contact   @relation(fields: [contactID], references: [id])
  contactID   String 

  
  @@id([eventID, contactID])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields:[userId], references:[id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique@map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields:[userId], references:[id], onDelete: Cascade)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
